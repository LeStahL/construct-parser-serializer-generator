/* 
 * Generated by construct-c (c) 2023 Alexander Kraus <nr4@z10.info>.
 * Generation timestamp: {{ info.now }}
 * Note: If you plan to edit this file, please reconsider your plan.
 */

#ifndef {{ caseConversionService.convertToMacro(info.baseName) }}_H
#define {{ caseConversionService.convertToMacro(info.baseName) }}_H

#include <stdint.h>

{%- for renamed in info.structStack %}

typedef struct {
    {%- for subcon in renamed.subcons %}
    {{ generatorService.cType(subcon) }} {{ caseConversionService.convertToSnake(subcon.name) }};
    {%- endfor %}
} {{ caseConversionService.convertToSnake(renamed.name) }}_t;
{%- endfor %}

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_SIZEOF
// Sizeof-related forward declarations
size_t sizeof_{{ caseConversionService.convertToSnake(info.baseName) }}({{ caseConversionService.convertToSnake(info.baseName) }}_t *instance);
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_SIZEOF */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_PARSER
#include <stdbool.h>
// Parser-related forward declarations.
bool parse_{{ caseConversionService.convertToSnake(info.baseName) }}({{ caseConversionService.convertToSnake(info.baseName) }}_t *instance, uint8_t *source);
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_PARSER */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_SERIALIZER
// Serializer-related forward declarations.
void serialize_{{ caseConversionService.convertToSnake(info.baseName) }}({{ caseConversionService.convertToSnake(info.baseName) }}_t *instance, uint8_t *target);
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_SERIALIZER */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_HEADER_ONLY
#include "{{ info.baseName }}.c"
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_HEADER_ONLY*/

#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_H */
