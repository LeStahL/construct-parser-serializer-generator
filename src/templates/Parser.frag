/* 
 * Generated by construct-parser-serializer-generator (c) 2023 Alexander Kraus <nr4@z10.info>.
 * Generation timestamp: {{ info.now }}
 * Note: If you plan to edit this file, please reconsider your plan.
 */

{%- macro generate_array(_tree, con) %}
int {{ info.dataName }}[{{ info.dataSize }}] = int[{{ info.dataSize }}](
    {{ info.dataLines }}
);
{%- endmacro %}

{%- macro generate_array_parser(_tree, con) %}
void parse()
{%- endmacro %}

{%- macro generate_texture_parser(_tree, con) %}

{%- endmacro %}

// Structures
{%- for renamed in generatorService.structEnumStack(info.subcon) %}
    {% if generatorService._isStruct(renamed.subcon) %}
struct {
        {%- for subcon in renamed.subcons %}
    {{ generatorService.cType(subcon) }} {{ caseConversionService.convertToSnake(subcon.name) }};
        {%- endfor %}
} {{ caseConversionService.convertToSnake(renamed.name) }}_t;
    {%- else %}
const int
        {%- for key, value in renamed.subcon.encmapping.items() %}
    {{ caseConversionService.convertToMacro(renamed.name) }}_{{ caseConversionService.convertToMacro(key) }} = {{ value }}{{ '' if loop.last else ',' }}
        {%- endfor %}
;
    {%- endif %}
{%- endfor %}

{%- if info.arrayParser %}
    // Array parser
    {{- generate_array(generatorService.subtree(caseConversionService.convertToSnake(_struct.name), generatorService.tree(_struct)), _struct) }}
    {{- generate_array_parser(generatorService.subtree(caseConversionService.convertToSnake(_struct.name), generatorService.tree(_struct)), _struct) }}
{%- endif %}
{%- if info.textureParser %}
    // Texture parser
{%- endif %}