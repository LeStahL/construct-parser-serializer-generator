# Generated by construct-parser-serializer-generator (c) 2023 Alexander Kraus <nr4@z10.info>.
# Generation timestamp: {{ info.now }}
# Note: If you plan to edit this file, please reconsider your plan.

from construct import *
from typing import Any, Iterable
from enum import IntEnum
from {{ info.baseName }} import {{ info.constructIdentifier }}, {{ generatorService.joinEnumNames(info.subcon) }}

{%- macro generate_binding(_tree, con) %}
class {{ caseConversionService.convertToPascal(con.name) }}:
    def __init__(self,
    {%- for key in _tree %}
        {%- set subcon = _tree[key] %}
        {%- set name = key.split('.')[-1] %}
        {{ caseConversionService.convertToCamel(name) }}: {{ generatorService.pythonType(subcon) }},
    {%- endfor %}
    ) -> None:
        self._container = None
    {%- for key in _tree %}
        {%- set subcon = _tree[key] %}
        {%- set name = key.split('.')[-1] %}
        self.{{ caseConversionService.convertToCamel(name) }} = {{ caseConversionService.convertToCamel(name) }}
    {%- endfor %}
    
    def parseFromContainer(self, container: Container) -> None:
        self._container = container
    {%- for key in _tree %}
        {%- set subcon = _tree[key] %}
        {%- set name = key.split('.')[-1] %}
        {%- if generatorService.isStruct(key, _tree) %}
        self.{{ caseConversionService.convertToCamel(name) }} = {{ caseConversionService.convertToPascal(subcon.name) }}(container['{{ caseConversionService.convertToPascal(subcon.name) }}'])
        {%- elif generatorService.isArray(key, _tree) %}
        self.{{ caseConversionService.convertToCamel(name) }} = list(map(
            lambda child: {{ subcon.subcon.name }}(child),
            container['{{ caseConversionService.convertToPascal(name) }}'],
        ))
        {%- else %}
        self.{{ caseConversionService.convertToCamel(name) }} = container['{{ caseConversionService.convertToPascal(name) }}']
        {%- endif %}
    {%- endfor %}

    def serializeToDict(self) -> dict:
        return {
    {%- for key in _tree %}
        {%- set subcon = _tree[key] %}
        {%- set name = key.split('.')[-1] %}
        {%- if generatorService.isStruct(key, _tree) %}
            '{{ caseConversionService.convertToPascal(name) }}': self.{{ caseConversionService.convertToCamel(name) }}.serializeToDict(),
        {%- elif generatorService.isArray(key, _tree) %}
            '{{ caseConversionService.convertToPascal(name) }}': list(map(
                lambda child: child.serializeToDict(),
                self.{{ caseConversionService.convertToCamel(name) }},
            ))
        {%- else %}
            '{{ caseConversionService.convertToPascal(name) }}': self.{{ caseConversionService.convertToCamel(name) }},
        {%- endif %}
    {%- endfor %}
        }

    JSONSchema = {
        "type": "object",
        "properties": {
    {%- for key in _tree %}
        {%- set subcon = _tree[key] %}
        {%- set name = key.split('.')[-1] %}
        {%- if generatorService.isStruct(key, _tree) %}
            "{{ caseConversionService.convertToPascal(name) }}": {{ generatorService.schemaType(subcon) }}.JSONSchema,
        {%- elif generatorService.isEnum(key, _tree) %}
            "{{ caseConversionService.convertToPascal(name) }}": {
                "type": "string",
                "enum": [
            {%- for key, value in subcon.subcon.encmapping.items() %}
                    "{{ key }}",
            {%- endfor %}
                ],
            },
        {%- elif generatorService.isArray(key, _tree) %}
            "{{ caseConversionService.convertToPascal(name) }}": {
                "type": "array",
                "items": {{ generatorService.schemaType(subcon) }}.JSONSchema,
            },            
        {%- else %}
            "{{ caseConversionService.convertToPascal(name) }}": {
                "type": "{{ generatorService.schemaType(subcon) }}",
            },
        {%- endif %}
    {%- endfor %}
        },
        "required": [
    {%- for key in _tree %}
        {%- set subcon = _tree[key] %}
        {%- set name = key.split('.')[-1] %}
            "{{ caseConversionService.convertToPascal(name) }}",
    {%- endfor %}
        ],
    }
{%- endmacro %}

# Python data bindings
{%- for _struct in generatorService.structStack(info.subcon) %}
    {{ generate_binding( generatorService.subtree(caseConversionService.convertToSnake(_struct.name), generatorService.tree(_struct)), _struct) }}
{%- endfor %}
