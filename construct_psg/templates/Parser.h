/* 
 * Generated by construct-parser-serializer-generator (c) 2023 Alexander Kraus <nr4@z10.info>.
 * Generation timestamp: {{ info.now }}
 * Note: If you plan to edit this file, please reconsider your plan.
 */

{%- macro generate_sizeof_forward_declarations(con) %}
size_t sizeof_{{ caseConversionService.convertToSnake(con.name) }}_t({{ caseConversionService.convertToSnake(con.name) }}_t *);
{%- endmacro %}

{%- macro generate_parse_forward_declarations(con) %}
void parse_{{ caseConversionService.convertToSnake(con.name) }}_t({{ caseConversionService.convertToSnake(con.name) }}_t *, uint8_t *);
{%- endmacro %}

{%- macro generate_serialize_forward_declarations(con) %}
void serialize_{{ caseConversionService.convertToSnake(con.name) }}_t({{ caseConversionService.convertToSnake(con.name) }}_t *, uint8_t *);
{%- endmacro %}

{%- macro generate_free_forward_declarations(con) %}
void free_{{ caseConversionService.convertToSnake(con.name) }}_t({{ caseConversionService.convertToSnake(con.name) }}_t *);
{%- endmacro %}

#pragma once

#include <stdint.h>
#ifdef __linux__
#include <stddef.h>
#endif // __linux__

{%- for renamed in generatorService.structEnumStack(info.subcon) %}
    {% if generatorService._isStruct(renamed.subcon) %}
typedef struct {
        {%- for subcon in renamed.subcons %}
    {{ generatorService.cType(subcon) }} {{ caseConversionService.convertToSnake(subcon.name) }};
        {%- endfor %}
    {%- else %}
typedef enum {
        {%- for key, value in renamed.subcon.encmapping.items() %}
    {{ caseConversionService.convertToMacro(renamed.name) }}_{{ caseConversionService.convertToMacro(key) }} = {{ value }}{{ '' if loop.last else ',' }}
        {%- endfor %}
    {%- endif %}
} {{ caseConversionService.convertToSnake(renamed.name) }}_t;
{%- endfor %}

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_SIZEOF
// Sizeof-related forward declarations.
{%- for _struct in generatorService.structStack(info.subcon) %}
    {{- generate_sizeof_forward_declarations(_struct) }}
{%- endfor %}
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_SIZEOF */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_PARSER
// Parser-related forward declarations.
{%- for _struct in generatorService.structStack(info.subcon) %}
    {{- generate_parse_forward_declarations(_struct) }}
{%- endfor %}
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_PARSER */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_SERIALIZER
// Serializer-related forward declarations.
{%- for _struct in generatorService.structStack(info.subcon) %}
    {{- generate_serialize_forward_declarations(_struct) }}
{%- endfor %}
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_SERIALIZER */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_DESTRUCTOR
// Destructor-related forward declarations
{%- for _struct in generatorService.structStack(info.subcon) %}
    {{- generate_free_forward_declarations(_struct) }}
{%- endfor %}
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_DESTRUCTOR */

#ifdef {{ caseConversionService.convertToMacro(info.baseName) }}_HEADER_ONLY
#include "{{ info.baseName }}.c"
#endif /* {{ caseConversionService.convertToMacro(info.baseName) }}_HEADER_ONLY */
